{"version":3,"sources":["../../../api/server/controllers/BookController.js"],"names":["BookService","require","Util","util","BookController","getAllBooks","req","res","allBooks","length","setSuccess","send","error","setError","addBook","body","title","price","description","newBook","createdBook","message","updateBook","alteredBook","id","params","Number","updatedBook","getBook","book","deleteBook","module","exports"],"mappings":"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","sourcesContent":["const BookService = require('../services/BookService');\nconst Util = require('../utils/Utils');\n\nconst util = new Util();\n\nclass BookController {\n  static async getAllBooks(req, res) {\n    try {\n      const allBooks = await BookService.getAllBooks();\n      if (allBooks.length > 0) {\n        util.setSuccess(200, 'Books retrieved', allBooks);\n      } else {\n        util.setSuccess(200, 'No book found');\n      }\n\n      return util.send(res);\n    }\n    catch (error) {\n      util.setError(400, error);\n      return util.send(res);\n    }\n  }\n\n  static async addBook(req, res) {\n    if (!req.body.title || !req.body.price || !req.body.description) {\n      util.setError(400, 'Please provide complete details');\n      return util.send(res);\n    }\n\n    const newBook = req.body;\n    \n    try {\n      const createdBook = await BookService.addBook(newBook);\n      util.setSuccess(201, 'Book Added!', createdBook);\n\n      return util.send(res);\n    }\n    catch (error) {\n      util.setError(400, error.message);\n      return util.send(res);\n    }\n  }\n\n  static async updateBook(req, res) {\n    const alteredBook = req.body;\n    const { id } = req.params;\n    \n    if (!Number(id)) {\n      util.setError(400, 'Please input a valid numeric value');\n      return util.send(res);\n    }\n\n    try {\n      const updatedBook = await BookService.updateBook(id, alteredBook);\n      \n      if (!updatedBook) {\n        util.setError(404, `Cannot find book with the id: ${id}`);\n      } else {\n        util.setSuccess(200, 'Book updated', updatedBook);\n      }\n\n      return util.send(res);\n    }\n    catch (error) {\n      util.setError(404, error);\n      return util.send(res);\n    }\n  }\n\n  static async getBook(req, res) {\n    const { id } = req.params;\n\n    if (!Number(id)) {\n      util.setError(400, 'Please input a valid numeric value');\n      return util.send(res);\n    }\n\n    try {\n      const book = await BookService.getBook(id);\n\n      if (!book) {\n        util.setError(404, `Cannot find book with the id ${id}`);\n      } else {\n        util.setSuccess(200, 'Found book', book);\n      }\n\n      return util.send(res);\n    }\n    catch (error) {\n      util.setError(404, error);\n      return util.send(res);\n    }\n  }\n\n  static async deleteBook(req, res) {\n    const { id } = req.params;\n\n    if (!Number(id)) {\n      util.setError(400, 'Please input a valid numeric value');\n      return util.send(res);\n    }\n\n    try {\n      const book = await BookService.deleteBook(id);\n\n      if (book) {\n        util.setSuccess(200, 'Book is deleted');\n      } else {\n        util.setError(404, `Book with id ${id} cannot be found`);\n      }\n\n      return util.send(res);\n    }\n    catch (error) {\n      util.setError(400, error);\n      return util.send(res);\n    }\n  }\n}\n\nmodule.exports = BookController;"],"file":"BookController.js"}